name: pipeline

on:
  schedule:
    - cron: 0 0 * * *
  push:
    branches:
      - develop
      - feat/*
      - hotfix/*
      - main
  pull_request:
    branches:
      - develop
      - feat/*
      - hotfix/*
      - main

env:
  CONTAINER_NAME: ${{ github.repository }}
  CONTAINER_REGISTRY: ghcr.io
  # https://github.com/microsoft/azure-pipelines-agent/releases
  AZP_AGENT_VERSION: 3.218.0
  # https://github.com/PowerShell/PowerShell/releases
  POWERSHELL_VERSION: 7.2.10
  # https://github.com/krallin/tini/releases
  TINI_VERSION: 0.19.0
  # https://github.com/mikefarah/yq/releases
  YQ_VERSION: 4.33.3
  # https://go.dev/dl
  GO_VERSION: 1.20.3
  # https://github.com/rootless-containers/rootlesskit/releases
  ROOTLESSKIT_VERSION: 1.1.0
  # https://github.com/moby/buildkit/releases
  BUILDKIT_VERSION: 0.11.5
  # https://github.com/Azure/azure-cli/releases
  AZURE_CLI_VERSION: 2.47.0
  # https://github.com/stedolan/jq/releases
  JQ_VERSION: 1.6
  # https://github.com/git-for-windows/git/releases
  GIT_VERSION_WIN: 2.40.1

jobs:
  build-helm:
    name: Build Helm chart
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2
        with:
          # We need all Git history for "version.sh"
          fetch-depth: 0
          # Ensure "version.sh" submodule us up-to-date
          submodules: recursive

      - name: Version
        id: version
        run: |
          echo "version=$(bash cicd/version/version.sh -g . -c)" >> $GITHUB_OUTPUT
          echo "version_full=$(bash cicd/version/version.sh -g . -c -m)" >> $GITHUB_OUTPUT

      - name: Setup Helm
        uses: azure/setup-helm@v3.5
        with:
          version: v3.11.2

      - name: Prepare GPG key for Helm chart
        run: |
          echo "${{ secrets.GPG_KEYRING }}" | gpg --dearmor > keyring.gpg

      - name: Package Helm chart
        run: |
          cp README.md src/helm/azure-pipelines-agent/

          helm package \
            --app-version ${{ env.AZP_AGENT_VERSION }} \
            --destination .cr-release-packages \
            --key 'Clémence Lesné' \
            --keyring keyring.gpg \
            --sign \
            --version ${{ steps.version.outputs.version }} \
            src/helm/azure-pipelines-agent

      - name: Cache Helm chart
        uses: actions/upload-artifact@v3.1.2
        with:
          name: helm-chart
          path: .cr-release-packages

      - name: Render Helm chart locally
        run: |
          helm template \
            --output-dir .helm-template \
            --values test/helm/azure-pipelines-agent/values.yaml \
            .cr-release-packages/azure-pipelines-agent-${{ steps.version.outputs.version }}.tgz

      - name: Run SAST Snyk for Helm
        uses: snyk/actions/iac@0.3.0
        # Snyk can be used to break the build when it detects security issues. In this case we want to upload the issues to GitHub CodeQL.
        continue-on-error: true
        with:
          args: --severity-threshold=medium --sarif
          file: .helm-template
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload results to GitHub CodeQL
        uses: github/codeql-action/upload-sarif@v2.2.12
        with:
          sarif_file: snyk.sarif

  deploy-helm:
    name: Deploy Helm chart
    needs:
      - build-publish-linux
      - build-publish-win
      - build-helm
      - semgrep
    # Only deploy on non-scheduled main branch, as there is only one Helm repo and we cannot override an existing version
    if: (github.event_name != 'schedule') && (github.ref == 'refs/heads/main')
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2
        with:
          # Chart Releaser needs to have local access to "gh-pages" plus current branch
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Download Helm chart
        uses: actions/download-artifact@v3.0.2
        with:
          name: helm-chart
          path: .cr-release-packages

      - name: Archive Helm chart
        uses: helm/chart-releaser-action@v1.5.0
        with:
          charts_dir: src/helm
          skip_packaging: true
        env:
          CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-publish-linux:
    name: Build & deploy Linux image "${{ matrix.os }}"
    needs:
      - semgrep
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - os: bullseye
            arch: linux/amd64,linux/arm64/v8
          - os: focal
            arch: linux/amd64,linux/arm64/v8
          - os: jammy
            arch: linux/amd64,linux/arm64/v8
          - os: ubi8
            arch: linux/amd64,linux/arm64/v8
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2
        with:
          # We need all Git history for "version.sh"
          fetch-depth: 0
          # Ensure "version.sh" submodule us up-to-date
          submodules: recursive

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Version
        id: version
        run: |
          echo "version=$(bash cicd/version/version.sh -g . -c)" >> $GITHUB_OUTPUT
          echo "version_full=$(bash cicd/version/version.sh -g . -c -m)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        id: setup-qemu
        uses: docker/setup-qemu-action@v2.1.0
        with:
          platforms: ${{ matrix.arch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Login to container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Container meta
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}
          flavor: |
            prefix=${{ matrix.os }}-
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=schedule
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version_full }}
            type=sha
          labels: |
            io.artifacthub.package.category=integration-delivery
            io.artifacthub.package.keywords=agent,azure,azure-devops,azure-pipelines,container,devops,docker,helm,kubernetes,pipelines,self-hosted,self-hosted-agent,auto-scale,keda
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=https://raw.githubusercontent.com/${{ env.CONTAINER_NAME }}/${{ github.sha }}/logo-1024.png
            io.artifacthub.package.maintainers=[{"name":"${{ github.actor }}","email":"${{ github.actor }}@users.noreply.github.com"}]
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ env.CONTAINER_NAME }}/${{ github.sha }}/README.md
            org.opencontainers.image.documentation=https://github.com/${{ env.CONTAINER_NAME }}
            org.opencontainers.image.source=https://github.com/clemlesne/azure-pipelines-agent/tree/${{ github.sha }}
            org.opencontainers.image.title=Azure Pipelines Agent
            org.opencontainers.image.vendor=${{ github.actor }}
            org.opencontainers.image.version=${{ steps.version.outputs.version_full }}

      - name: Store tag
        id: tag
        run: |
          branch=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
          tag=$(echo "${{ steps.meta.outputs.tags }}" | grep $branch)
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Build/push container
        uses: docker/build-push-action@v4.0.0
        with:
          build-args: |
            "AZP_AGENT_VERSION=${{ env.AZP_AGENT_VERSION }}"
            "AZURE_CLI_VERSION=${{ env.AZURE_CLI_VERSION }}"
            "BUILDKIT_VERSION=${{ env.BUILDKIT_VERSION }}"
            "GO_VERSION=${{ env.GO_VERSION }}"
            "JQ_VERSION=${{ env.JQ_VERSION }}"
            "POWERSHELL_VERSION=${{ env.POWERSHELL_VERSION }}"
            "ROOTLESSKIT_VERSION=${{ env.ROOTLESSKIT_VERSION }}"
            "TINI_VERSION=${{ env.TINI_VERSION }}"
            "YQ_VERSION=${{ env.YQ_VERSION }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: src/docker
          file: src/docker/Dockerfile-${{ matrix.os }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.arch }}
          provenance: true
          push: true
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Run SAST Snyk for container image
        uses: snyk/actions/docker@0.3.0
        # Snyk can be used to break the build when it detects security issues. In this case we want to upload the issues to GitHub CodeQL.
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=src/docker/Dockerfile-${{ matrix.os }} --severity-threshold=medium --fail-on=upgradable --sarif
          image: ${{ steps.tag.outputs.tag }}

      - name: Upload results to GitHub CodeQL
        uses: github/codeql-action/upload-sarif@v2.2.12
        with:
          sarif_file: snyk.sarif

  build-publish-win:
    name: Build & deploy Windows image "${{ matrix.os }}"
    needs:
      - semgrep
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - os: win-ltsc2022
            runs-on: windows-2022
          - os: win-ltsc2019
            runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2
        with:
          # We need all Git history for "version.sh"
          fetch-depth: 0
          # Ensure "version.sh" submodule us up-to-date
          submodules: recursive

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Version
        id: version
        run: |
          echo "version=$(powershell cicd/version/version.ps1 -g . -c)" >> $Env:GITHUB_OUTPUT
          echo "version_full=$(powershell cicd/version/version.ps1 -g . -c -m)" >> $Env:GITHUB_OUTPUT

      - name: Login to container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Container meta
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}
          flavor: |
            prefix=${{ matrix.os }}-
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=schedule
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version_full }}
            type=sha
          labels: |
            io.artifacthub.package.category=integration-delivery
            io.artifacthub.package.keywords=agent,azure,azure-devops,azure-pipelines,container,devops,docker,helm,kubernetes,pipelines,self-hosted,self-hosted-agent,auto-scale,keda
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=https://raw.githubusercontent.com/${{ env.CONTAINER_NAME }}/${{ github.sha }}/logo-1024.png
            io.artifacthub.package.maintainers=[{"name":"${{ github.actor }}","email":"${{ github.actor }}@users.noreply.github.com"}]
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ env.CONTAINER_NAME }}/${{ github.sha }}/README.md
            org.opencontainers.image.documentation=https://github.com/${{ env.CONTAINER_NAME }}
            org.opencontainers.image.source=https://github.com/clemlesne/azure-pipelines-agent/tree/${{ github.sha }}
            org.opencontainers.image.title=Azure Pipelines Agent
            org.opencontainers.image.vendor=${{ github.actor }}
            org.opencontainers.image.version=${{ steps.version.outputs.version_full }}

      - name: Store tag
        id: tag
        run: |
          $branch = "${{ github.ref_name }}".Replace("/", "-")
          $tag = ('${{ steps.meta.outputs.tags }}').Split([Environment]::NewLine) | Where-Object { $_ -like "*$branch*" } | Select-Object -First 1
          echo "tag=$tag" >> $Env:GITHUB_OUTPUT

      - name: Build/push container
        run: |
          $params = @(
            "--build-arg", "AZP_AGENT_VERSION=${{ env.AZP_AGENT_VERSION }}",
            "--build-arg", "AZURE_CLI_VERSION=${{ env.AZURE_CLI_VERSION }}",
            "--build-arg", "GIT_VERSION=${{ env.GIT_VERSION_WIN }}",
            "--build-arg", "JQ_VERSION=${{ env.JQ_VERSION }}",
            "--build-arg", "POWERSHELL_VERSION=${{ env.POWERSHELL_VERSION }}",
            "--build-arg", "YQ_VERSION=${{ env.YQ_VERSION }}",
            "--file", "src/docker/Dockerfile-${{ matrix.os }}"
          )

          $tags = ('${{ steps.meta.outputs.tags }}').Split([Environment]::NewLine)
          foreach ($tag in $tags) {
            $params += "--tag", $tag
            $params += "--cache-from", $tag
          }

          $labels = ('${{ steps.meta.outputs.labels }}').Split([Environment]::NewLine)
          foreach ($label in $labels) {
            $params += "--label", $label
          }

          # Build
          docker build @params src\docker

          # Push
          foreach ($tag in $tags) {
            docker push $tag
          }

  semgrep:
    name: SAST Semgrep
    runs-on: ubuntu-22.04
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2

      - name: Run tests
        run: semgrep ci --sarif --output=semgrep.sarif
        env:
          SEMGREP_RULES: p/cwe-top-25 p/owasp-top-ten p/secrets p/kubernetes p/dockerfile

      - name: Upload results to GitHub CodeQL
        uses: github/codeql-action/upload-sarif@v2.2.12
        if: always()
        with:
          sarif_file: semgrep.sarif
