FROM mcr.microsoft.com/dotnet/sdk:7.0-windowsservercore-ltsc2019

# Configure local user
USER ContainerAdministrator
SHELL ["cmd", "/S", "/C"]
ENV HOME C:\\app-root

# Avoid Python cache during build
ENV PYTHONDONTWRITEBYTECODE 1

# Install Powershell, then verify installation
ARG POWERSHELL_VERSION
ENV POWERSHELL_VERSION ${POWERSHELL_VERSION}
RUN curl -LsSf --retry 3 "https://github.com/PowerShell/PowerShell/releases/download/v%POWERSHELL_VERSION%/PowerShell-%POWERSHELL_VERSION%-win-x64.msi" -o powershell.msi \
    && msiexec.exe /i powershell.msi /qn /norestart \
    && del /q powershell.msi
RUN pwsh -Version
SHELL ["pwsh", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Install Git, then verify installation
ARG GIT_VERSION
ENV GIT_VERSION ${GIT_VERSION}
RUN curl -LsSf --retry 3 "https://github.com/git-for-windows/git/releases/download/v${Env:GIT_VERSION}.windows.1/Git-${Env:GIT_VERSION}-64-bit.exe" -o git.exe \
    && Start-Process git.exe -Wait -ArgumentList '/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /NOCANCEL /SP-' \
    && Remove-Item git.exe
RUN git --version

# Install JQ, then verify installation
ARG JQ_VERSION
ENV JQ_VERSION ${JQ_VERSION}
RUN mkdir 'C:\Program Files\jq' \
    && curl -LsSf --retry 3 "https://github.com/stedolan/jq/releases/download/jq-${Env:JQ_VERSION}/jq-win64.exe" -o 'C:\Program Files\jq\jq.exe' \
    && [Environment]::SetEnvironmentVariable('Path', $Env:Path + ';C:\Program Files\jq', [EnvironmentVariableTarget]::Machine)
# hadolint ignore=DL3059
RUN jq --version

# Install Python, then verify installation
ARG PYTHON_VERSION
ENV PYTHON_VERSION ${PYTHON_VERSION}
RUN curl -LsSf --retry 3 "https://python.org/ftp/python/${Env:PYTHON_VERSION}/python-${Env:PYTHON_VERSION}-amd64.exe" -o python.exe \
    && Start-Process python.exe -Wait -ArgumentList '/quiet InstallAllUsers=1 PrependPath=1 Include_test=0' \
    && Remove-Item python.exe
RUN python --version \
    && python -m pip \
        --disable-pip-version-check \
        --no-cache-dir \
        --quiet \
        install \
            setuptools wheel

# Install Azure CLI, then verify installation
ARG AZURE_CLI_VERSION
ENV AZURE_CLI_VERSION ${AZURE_CLI_VERSION}
RUN python -m pip \
        --disable-pip-version-check \
        --no-cache-dir \
        --quiet \
        install \
            "azure-cli==${Env:AZURE_CLI_VERSION}" \
    && az version

# Install AWS CLI, then verify installation
ARG AWS_CLI_VERSION
ENV AWS_CLI_VERSION ${AWS_CLI_VERSION}
RUN curl -LsSf --retry 3 "https://awscli.amazonaws.com/AWSCLIV2-${Env:AWS_CLI_VERSION}.msi" -o awscli.msi \
    && Start-Process msiexec.exe -Wait -ArgumentList '/I awscli.msi /qn /norestart' \
    && Remove-Item awscli.msi
RUN aws --version

# Install Google Cloud CLI, then verify installation
ARG GCLOUD_CLI_VERSION
ENV GCLOUD_CLI_VERSION ${GCLOUD_CLI_VERSION}
RUN curl -LsSf --retry 3 "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${Env:GCLOUD_CLI_VERSION}-windows-x86_64.zip" -o gcloud.zip \
    && Expand-Archive -Force gcloud.zip -DestinationPath 'C:\Program Files' \
    && Remove-Item gcloud.zip \
    && Rename-Item 'C:\Program Files\google-cloud-sdk' 'gcloud' \
    && Start-Process cmd.exe -Wait -ArgumentList '/c ''C:\Program Files\gcloud\install.bat'' --additional-components beta --quiet' \
    && [Environment]::SetEnvironmentVariable('Path', $Env:Path + ';C:\Program Files\gcloud\bin', [EnvironmentVariableTarget]::Machine)
RUN gcloud version

# Install YQ, then verify installation
ARG YQ_VERSION
ENV YQ_VERSION ${YQ_VERSION}
RUN mkdir 'C:\Program Files\yq' \
    && curl -LsSf --retry 3 "https://github.com/mikefarah/yq/releases/download/v${Env:YQ_VERSION}/yq_windows_amd64.exe" -o 'C:\Program Files\yq\yq.exe' \
    && [Environment]::SetEnvironmentVariable('Path', $Env:Path + ';C:\Program Files\yq', [EnvironmentVariableTarget]::Machine)
# hadolint ignore=DL3059
RUN yq --version

# Install Azure Pipelines Agent sources, then verify installation
ARG AZP_AGENT_VERSION
ENV AZP_AGENT_VERSION ${AZP_AGENT_VERSION}
ENV AZP_HOME ${HOME}\\azp-agent
RUN mkdir $Env:AZP_HOME \
    && curl -LsSf --retry 3 "https://vstsagentpackage.azureedge.net/agent/${Env:AZP_AGENT_VERSION}/vsts-agent-win-x64-${Env:AZP_AGENT_VERSION}.zip" -o azp-agent.zip \
    && Expand-Archive -Force azp-agent.zip -DestinationPath $Env:AZP_HOME \
    && Remove-Item azp-agent.zip \
    && & "${Env:AZP_HOME}\run.cmd" --version
ENV AZP_WORK ${HOME}\\azp-work

# Install zstd, then verify installation
ARG ZSTD_VERSION
ENV ZSTD_VERSION ${ZSTD_VERSION}
RUN curl -LsSf --retry 3 "https://github.com/facebook/zstd/releases/download/v${Env:ZSTD_VERSION}/zstd-v${Env:ZSTD_VERSION}-win64.zip" -o zstd.zip \
    && Expand-Archive -Force zstd.zip -DestinationPath 'C:\Program Files' \
    && Remove-Item zstd.zip \
    && Rename-Item "C:\Program` Files\zstd-v${Env:ZSTD_VERSION}-win64" 'zstd' \
    && [Environment]::SetEnvironmentVariable('Path', $Env:Path + ';C:\Program Files\zstd', [EnvironmentVariableTarget]::Machine)
# hadolint ignore=DL3059
RUN zstd --version

# Define path for the custom SSL certificate
ENV AZP_CUSTOM_CERT_PEM ${HOME}\\azp-custom-certs

# Reset Python configs to default
ENV PYTHONDONTWRITEBYTECODE=

# Install Azure Pipelines Agent startup script
WORKDIR ${AZP_HOME}
COPY start.ps1 .
# Escaping antislash, containerd is bugged
# See: https://github.com/containerd/containerd/issues/6300#issuecomment-988048374
CMD ["pwsh", ".\\start.ps1"]
